{"ast":null,"code":"var _jsxFileName = \"/home/speudal/Documents/AccMan/src/Components/PlatformTable.js\";\nimport { AiOutlineDelete } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons/lib\";\nimport \"../Styles/PlatformTable.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlatformTable = props => {\n  const platform = props.platform;\n  const platformEntries = props.platformEntries;\n  const platformColumns = props.platformColumns;\n  const setPlatformEntries = props.setPlatformEntries;\n  const tableEditable = props.tableEditable;\n  const setPlatformColumns = props.setPlatformColumns;\n\n  const onInputField = (entryIndex, fieldIndex, e) => {\n    console.log(e.target.textContent);\n    const newArray = platformEntries;\n    newArray[entryIndex][fieldIndex] = e.target.textContent;\n    setPlatformEntries(newArray);\n    localStorage.setItem(`${platform};entries`, JSON.stringify(newArray));\n    console.log(entryIndex, fieldIndex);\n  };\n\n  const onClickRemoveColumn = index => {\n    const res = window.confirm(\"Are you sure that you want to remove this column ?\");\n    if (!res) return;\n    console.log(index);\n    console.log(platformColumns);\n    let newArrayColumns = platformColumns;\n    newArrayColumns.splice(index, 1);\n    const newArrayEntries = platformEntries.map(entry => {\n      let tmp = entry;\n      tmp.splice(index, 1);\n      return tmp;\n    });\n    setPlatformColumns(newArrayColumns);\n    localStorage.setItem(`${platform};columns`, JSON.stringify(newArrayColumns));\n    setPlatformEntries(newArrayEntries);\n    localStorage.setItem(`${platform};entries`, JSON.stringify(newArrayEntries));\n  };\n\n  const onClickRemove = index => {\n    const confirm = window.confirm(`Are you sure that you want to remove this line ?`);\n    if (!confirm) return;\n    const newArray = platformEntries.splice(index, index);\n    setPlatformEntries(newArray);\n    localStorage.setItem(`${platform};entries`, JSON.stringify(newArray));\n  };\n\n  const onInputColumn = (index, e) => {\n    const newArray = platformColumns;\n    newArray[index] = e.target.textContent;\n    setPlatformColumns(newArray);\n    localStorage.setItem(`${platform};columns`, JSON.stringify(newArray));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    id: \"platformTable\",\n    size: \"sm\",\n    responsive: true,\n    striped: true,\n    dark: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [tableEditable && /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHeader\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHeader\",\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), platformColumns.map((name, index) => {\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            contentEditable: tableEditable,\n            onInput: e => onInputColumn(index, e),\n            className: \"tableHeader\",\n            children: [name, tableEditable && /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n              value: {\n                color: \"white\"\n              },\n              children: /*#__PURE__*/_jsxDEV(AiOutlineDelete, {\n                className: \"buttonDelete\",\n                onClick: () => onClickRemoveColumn(index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: platformEntries.map((entry, mainIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [tableEditable && /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"tableRows\",\n            children: /*#__PURE__*/_jsxDEV(IconContext.Provier, {\n              children: /*#__PURE__*/_jsxDEV(AiOutlineDelete, {\n                onClick: () => onClickRemove(mainIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"tableRows\",\n            children: mainIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), entry.map((current, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"tableRows\",\n            contentEditable: tableEditable,\n            onInput: e => onInputField(mainIndex, index, e),\n            children: current\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this))]\n        }, mainIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlatformTable;\nexport default PlatformTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlatformTable\");","map":{"version":3,"sources":["/home/speudal/Documents/AccMan/src/Components/PlatformTable.js"],"names":["AiOutlineDelete","IconContext","PlatformTable","props","platform","platformEntries","platformColumns","setPlatformEntries","tableEditable","setPlatformColumns","onInputField","entryIndex","fieldIndex","e","console","log","target","textContent","newArray","localStorage","setItem","JSON","stringify","onClickRemoveColumn","index","res","window","confirm","newArrayColumns","splice","newArrayEntries","map","entry","tmp","onClickRemove","onInputColumn","name","color","mainIndex","current"],"mappings":"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","sourcesContent":["import { AiOutlineDelete } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons/lib\";\nimport \"../Styles/PlatformTable.css\";\n\nconst PlatformTable = (props) => {\n  const platform = props.platform;\n  const platformEntries = props.platformEntries;\n  const platformColumns = props.platformColumns;\n  const setPlatformEntries = props.setPlatformEntries;\n  const tableEditable = props.tableEditable;\n  const setPlatformColumns = props.setPlatformColumns;\n\n  const onInputField = (entryIndex, fieldIndex, e) => {\n    console.log(e.target.textContent);\n    const newArray = platformEntries;\n    newArray[entryIndex][fieldIndex] = e.target.textContent;\n    setPlatformEntries(newArray);\n    localStorage.setItem(`${platform};entries`, JSON.stringify(newArray));\n    console.log(entryIndex, fieldIndex);\n  };\n\n  const onClickRemoveColumn = (index) => {\n    const res = window.confirm(\n      \"Are you sure that you want to remove this column ?\"\n    );\n\n    if (!res) return;\n\n    console.log(index);\n    console.log(platformColumns);\n    let newArrayColumns = platformColumns;\n    newArrayColumns.splice(index, 1);\n    const newArrayEntries = platformEntries.map((entry) => {\n      let tmp = entry;\n      tmp.splice(index, 1);\n      return tmp;\n    });\n\n    setPlatformColumns(newArrayColumns);\n    localStorage.setItem(\n      `${platform};columns`,\n      JSON.stringify(newArrayColumns)\n    );\n    setPlatformEntries(newArrayEntries);\n    localStorage.setItem(\n      `${platform};entries`,\n      JSON.stringify(newArrayEntries)\n    );\n  };\n\n  const onClickRemove = (index) => {\n    const confirm = window.confirm(\n      `Are you sure that you want to remove this line ?`\n    );\n\n    if (!confirm) return;\n    const newArray = platformEntries.splice(index, index);\n    setPlatformEntries(newArray);\n    localStorage.setItem(`${platform};entries`, JSON.stringify(newArray));\n  };\n\n  const onInputColumn = (index, e) => {\n    const newArray = platformColumns;\n\n    newArray[index] = e.target.textContent;\n    setPlatformColumns(newArray);\n    localStorage.setItem(`${platform};columns`, JSON.stringify(newArray));\n  };\n  return (\n    <table\n      id=\"platformTable\"\n      size=\"sm\"\n      responsive={true}\n      striped={true}\n      dark={true}\n    >\n      <thead>\n        <tr>\n          {tableEditable && <th className=\"tableHeader\">Delete</th>}\n          <th className=\"tableHeader\">#</th>\n          {platformColumns.map((name, index) => {\n            return (\n              <th\n                contentEditable={tableEditable}\n                onInput={(e) => onInputColumn(index, e)}\n                key={name}\n                className=\"tableHeader\"\n              >\n                {name}\n                {tableEditable && (\n                  <IconContext.Provider value={{ color: \"white\" }}>\n                    <AiOutlineDelete\n                      className=\"buttonDelete\"\n                      onClick={() => onClickRemoveColumn(index)}\n                    />\n                  </IconContext.Provider>\n                )}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {platformEntries.map((entry, mainIndex) => {\n          return (\n            <tr key={mainIndex}>\n              {tableEditable && (\n                <td className=\"tableRows\">\n                  <IconContext.Provier>\n                    <AiOutlineDelete onClick={() => onClickRemove(mainIndex)} />\n                  </IconContext.Provier>\n                </td>\n              )}\n              <td className=\"tableRows\">{mainIndex + 1}</td>\n              {entry.map((current, index) => (\n                <td\n                  className=\"tableRows\"\n                  key={index}\n                  contentEditable={tableEditable}\n                  onInput={(e) => onInputField(mainIndex, index, e)}\n                >\n                  {current}\n                </td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default PlatformTable;\n"]},"metadata":{},"sourceType":"module"}